// vim:ai:ts=4:ic:aw:noet

import java.io.* ;
import java.math.BigInteger ;

public class Euler_029 extends EulerBase
{
	public Euler_029()
	{
		title	= "Distinct powers" ;

		problem	= "Problem 29\n"
				+ "\n"
				+ "Consider all integer combinations of a^b for 2 <= a <= 5 and 2 <= b <= 5:\n"
				+ "\n"
				+ "    2^2= 4, 2^3=  8, 2^4= 16, 2^5=  32\n"
				+ "    3^2= 9, 3^3= 27, 3^4= 81, 3^5= 243\n"
				+ "    4^2=16, 4^3= 64, 4^4=256, 4^5=1024\n"
				+ "    5^2=25, 5^3=125, 5^4=625, 5^5=3125\n"
				+ "\n"
				+ "If they are then placed in numerical order, with any repeats removed, we\n"
				+ "get the following sequence of 15 distinct terms:\n"
				+ "\n"
				+ "    4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n"
				+ "\n"
				+ "How many distinct terms are in the sequence generated by a^b for\n"
				+ "2 <= a <= 100 and 2 <= b <= 100?\n" ;

		runsets	= new RunSet[] {
					new RunSet( "Test",		new Run( 5,		15		) ),
					new RunSet( "Problem",	new Run( 100,	9183	) )
				} ;

		report	= "Distinct powers of a^b, where 2 <= a,b <= %,d is %,d" ;
	}

//----------------------------------------------------------------------------------

	protected long solve( long limit )
		throws NoSolutionException
	{
		BigInteger[] list = new BigInteger[ (int) ( (limit-1) * (limit-1) ) ] ;
		int list_size = 0 ;

		BigInteger one  = new BigInteger( "1" ) ;
		BigInteger bi_a = new BigInteger( "2" ) ;

		for( int a  = 2 ; a <= limit ; a++ )
		{
			for( int b  = 2 ; b <= limit ; b++ )
			{
				BigInteger power = bi_a.pow( b ) ;

				//System.out.printf( "%3d %3d %s\n", a, b, power.toString() ) ;

				int i ;
				for( i = 0 ; i < list_size ; i++ )
				{
					if( list[i].equals( power ) )
						break ;
				}

				if( i == list_size )
				{
					list[list_size++] = power ;
				}
			}

			bi_a = bi_a.add( one ) ;
		}
		return list_size ;
	}
}
